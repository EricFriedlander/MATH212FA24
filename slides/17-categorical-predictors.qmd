---
title: "Categorical Predictors"
author: "Prof. Eric Friedlander"
date: "2024-10-07"
date-format: "MMM DD, YYYY"
footer: "[ðŸ”— MAT 212 - Fall 2024 -  Schedule](https://mat212fa24.netlify.app/schedule)"
logo: "../images/logo.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: false
    transition: fade
    slide-number: false
    incremental: false 
    chalkboard: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
execute:
  freeze: auto
  echo: true
  cache: false
knitr:
  opts_chunk: 
    R.options:      
    width: 200
bibliography: references.bib
---

```{r setup}
#| include: false

library(countdown)
library(coursekata)

knitr::opts_chunk$set(
  fig.width = 10,
  fig.asp = 0.618,
  fig.retina = 3,
  dpi = 300,
  fig.align = "center"
)
```

## Announcements & Getting Started

-   Exam Review Wednesday
-   Exam Friday
-   Project proposals due Friday!
    +   Accepted without penalty through Monday 10/14 at 11:59pm
-   Don't forget about Oral R Quiz!
    +   Happy to administer over Teams during the break if you'd like...

::: appex
ðŸ“‹ [AE 12 - P2P Loans](https://mat212fa24.netlify.app/ae/ae-12-categorical-predictors)

- Open up AE 12
- Complete Exercise 0 if you have time.
:::

# Categorical predictors

## Topics

-   Understanding categorical predictors
-   Understand how categorical predictors interact with quantitative predictors

## Computational setup

```{r}
#| echo: true

# load packages
library(tidyverse)
library(ggformula)
library(mosaic)
library(broom)
library(openintro)
library(patchwork)
library(knitr)
library(kableExtra)

# set default theme and larger font size for ggplot2
ggplot2::theme_set(ggplot2::theme_bw(base_size = 16))
```

# Data

## Data: Peer-to-peer lender

Today's data is a sample of 50 loans made through a peer-to-peer lending club. The data is in the `loan50` data frame in the **openintro** R package.

```{r}
#| echo: false
loan50 |>
  select(annual_income, verified_income, interest_rate)
```

## Variables

**Predictors**:

::: nonincremental
-   `annual_income`: Annual income
-   `verified_income`: Whether borrower's income source and amount have been verified (`Not Verified`, `Source Verified`, `Verified`)
:::

**Response**: `interest_rate`: Interest rate for the loan

## Response: `interest_rate`

```{r}
#| echo: false
ggplot(loan50, aes(x = interest_rate)) +
  geom_density(fill = "steelblue") +
  labs(title = "Distribution of interest rate")
```

```{r}
#| echo: false
loan50 |>
  summarise(
    min = min(interest_rate),
    median = median(interest_rate),
    max = max(interest_rate),
    iqr = IQR(interest_rate)
  ) |>
  kable()
```

## Predictors {.small}

```{r}
#| out.width: "100%"
#| code-fold: true
p1 <- loan50 |> 
  gf_bar(verified_income~.) |> 
  gf_labs(title = "Verified Income", 
       y = "")

p2 <- loan50 |> 
  gf_histogram(~annual_income, binwidth = 20000) |> 
  gf_labs(title = "",
       x = "Annual income")

p1 / p2
```

## Data manipulation: Rescale income

```{r}
#| echo: true

loan50 <- loan50 |>
  mutate(annual_income_k = annual_income / 1000)

loan50 |> 
  gf_histogram(~annual_income_k, binwidth = 20) |> 
  gf_labs(title = "Annual income (in $1000s)", x = "")
```

# Categorical predictor variables

::: appex
Complete Exercises 1 and 2.
:::


## Indicator variables

-   Suppose there is a categorical variable with $K$ categories (levels)

-   We can make $K$ indicator variables - one indicator for each category

-   An **indicator variable** takes values 1 or 0

    -   1 if the observation belongs to that category
    -   0 if the observation does not belong to that category

## Data manipulation: Create indicator variables for `verified_income`

```{r}
#| echo: true

loan50 <- loan50 |>
  mutate(
    not_verified = if_else(verified_income == "Not Verified", 1, 0),
    source_verified = if_else(verified_income == "Source Verified", 1, 0),
    verified = if_else(verified_income == "Verified", 1, 0)
  )

loan50 |>
  select(verified_income, not_verified, source_verified, verified) |>
  slice(1, 3, 6)
```

## Indicators in the model {.midi}

-   We will use $K-1$ of the indicator variables in the model.
-   The **reference level** or **baseline** is the category that doesn't have a term in the model.
-   The coefficients of the indicator variables in the model are interpreted as the expected change in the response compared to the baseline, holding all other variables constant.
-   This approach is also called **dummy coding** and *R will do this for you*

```{r}
loan50 |>
  select(verified_income, source_verified, verified) |>
  slice(1, 3, 6)
```

## Application Exercise

::: appex
Complete Exercises 3 & 4
:::

## Interpreting `verified_income` {.smaller}

::::{.columns}
:::{.column}
```{r}
#| echo: false
cat_mod <- lm(interest_rate ~ verified_income, data = loan50) 
cat_mod |> 
  tidy() |>
  kable(digits = 3) 
```
:::
:::{.column}
```{r}
#| echo: false
loan50 |> 
  gf_jitter(interest_rate ~ verified_income, height = 0, width = 0.15) |> 
  gf_model(cat_mod)
```
:::
::::

::: question
-   Where do we see each of the estimates in the plot?
-   Where do we see the values we'd predict in the plot?
-   Are `verified_income` and `interest_rate` **correlated**?
:::


```{r}
#| echo: false

countdown::countdown(minutes = 3, seconds = 0)
```


## Model equation

$$
\begin{align}\hat{\text{interest_rate}} =  9.541 &+ 2.224 \times \text{source_verified}\\  
&+ 6.312 \times \text{verified}
\end{align}
$$

# Adding in another predictor

::: appex
Complete Exercise 5-6.
:::

## Interest rate vs. annual income: parallel slopes

```{r}
#| echo: false

inc_model <- lm(interest_rate ~ annual_income_k, data = loan50)

inc_verinc_model <- lm(interest_rate ~ annual_income_k + verified_income, data = loan50)

p1 <- plotModel(inc_model) |> 
  gf_labs(title = "SLR")
p2 <- plotModel(inc_verinc_model) |> 
  gf_labs(title = "With verified income")

p1 + p2
```

## Parallel slopes interpretation {.smaller}

```{r}
#| echo: FALSE

inc_verinc_model |> 
  tidy() |> 
  kable(digits = 3)
```

-   Slope of `annual_income_k` is -0.022 regardless of `verified_income` level
-   Change in `verified_income` corresponds to a shift in the intercept
    +   Intercept for `Not Verified` is 11.388
    +   For `Source Verified` shift intercept up 2.171 
        -   (i.e. intercept $= 11.388 + 2.171 = 13.599$)
    +   For `Verified` shift intercept up 6.792 **from `Not Verified`**
        -   (i.e. intercept $= 11.388 + 6.792 = 18.180$)


## Interest rate vs. annual income: interaction term

```{r}
#| echo: false

inc_verinc_interaction_model <- lm(interest_rate ~ annual_income_k + verified_income + verified_income*annual_income_k, data = loan50)

p1 <- plotModel(inc_verinc_model) |> 
  gf_labs(title = "No Interaction Term")
p2 <- plotModel(inc_verinc_interaction_model) |> 
  gf_labs(title = "Interaction Term")

p1 + p2+ plot_layout(guides = "collect")
```


## Interpreting interaction terms

```{r}
#| echo: FALSE

inc_verinc_interaction_model |> 
  tidy() |> 
  kable(digits = 3)
```

-   Slope of `annual_income_k` **depends** on `verified_income` level
-   **No difference:** fit three separate linear models on the data corresponding to each level of `verified_income`

## Understanding the model {.midi}

$$
\begin{aligned}
\hat{interest\_rate} &= 910.303 - 0.009 \times annual\_income\_k \\ &+ 3.423 \times SourceVerified + 9.788 \times Verified \\ &- 0.015 \times annual\_income\_k \times SourceVerified\\ &- 0.031 \times annual\_income\_k \times Verified
\end{aligned}
$$

::: appex
Complete Exercise 7
:::
