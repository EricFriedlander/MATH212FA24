---
title: "SLR: Fitting models in R with tidymodels"
author: "Prof. Maria Tackett"
date: "2022-09-05"
date-format: "MMM DD, YYYY"
footer: "[üîó Week 02](https://sta210-fa22.netlify.app/weeks/week-02.html)"
logo: "../images/logo.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: false
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
knitr:
  opts_chunk: 
    R.options:      
    width: 200
---

## Announcements

-   No office hours today. Office hours start Tuesday, September 6. [Click here](https://docs.google.com/spreadsheets/d/1Ay1GxqU2HDpFwnNLZxv0baIAa1lJwUVdtvmprPdkefk/edit?usp=sharing) for full schedule

-   Check your email for an email to join the course GitHub organization. You will receive one by Tuesday, September 6.

-   See [Week 02](https://sta210-fa22.netlify.app/weeks/week-02.html) for this week's activities.

## Topics

-   Introduce the computing toolkit - RStudio and GitHub
-   Use tidymodels to fit and summarize regression models in R
-   Complete an application exercise on exploratory data analysis and modeling

## Computational setup

```{r packages}
#| echo: true
#| eval: false

# load packages
library(tidyverse)       # for data wrangling
library(tidymodels)      # for modeling
library(fivethirtyeight) # for the fandango dataset

# set default theme and larger font size for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))

# set default figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.618,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%"
)
```

```{r packages-run}
#| echo: false
#| eval: true
#| message: false
#| warning: false

# load packages
library(tidyverse)       # for data wrangling
library(fivethirtyeight) # for the fandango dataset

# set default theme and larger font size for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))

# set default figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.618,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%"
)
```

# Computing toolkit

## Reproducibility checklist

::: question
What does it mean for an analysis to be reproducible?
:::

. . .

**Near term goals**:

‚úîÔ∏è Are the tables and figures reproducible from the code and data?

‚úîÔ∏è Does the code actually do what you think it does?

‚úîÔ∏è In addition to what was done, is it clear *why* it was done?

. . .

**Long term goals**:

‚úîÔ∏è Can the code be used for other data?

‚úîÔ∏è Can you extend the code to do other things?

## Toolkit

-   **Scriptability** $\rightarrow$ R

-   **Literate programming** (code, narrative, output in one place) $\rightarrow$ Quarto

-   **Version control** $\rightarrow$ Git / GitHub

    -   *More on this in this week's lab*

## What are R and RStudio?

-   R is a statistical programming language

-   RStudio is a convenient interface for R (an integrated development environment, IDE)

![](images/03/r_vs_rstudio_1.png){fig-align="center"}

::: footnote
Source: [Modern Dive](https://moderndive.com/1-getting-started.html)
:::

------------------------------------------------------------------------

## RStudio IDE

![](images/03/rstudio-panes.png){fig-align="center"}

------------------------------------------------------------------------

## Quarto

-   Fully reproducible reports -- the analysis is run from the beginning each time you render

-   Code goes in chunks and narrative goes outside of chunks

-   Visual editor to make document editing experience similar to a word processor (Google docs, Word, Pages, etc.)

## Quarto

![](images/03/quarto.png){fig-align="center"}

## How will we use Quarto?

-   Every application exercise and assignment is written in a Quarto document

-   You'll have a template Quarto document to start with

-   The amount of scaffolding in the template will decrease over the semester

## Application exercise

::: appex
üìã [github.com/sta210-fa22/ae-02-bikeshare](https://github.com/sta210-fa22/ae-02-bikeshare)
:::

# Using R for SLR

## Recap of last lecture {.smaller}

<div>

-   Used simple linear regression to describe the relationship between a quantitative predictor and quantitative outcome variable.

-   Used the least squares method to estimate the slope and intercept.

-   We interpreted the slope and intercept.

    <div>

    -   **Slope:** For every one unit increase in $x$, we expect y to be higher/lower by $\hat{\beta}_1$ units, on average.
    -   **Intercept:** If $x$ is 0, then we expect $y$ to be $\hat{\beta}_0$ units.

    </div>

-   Predicted the response given a value of the predictor variable.

-   Defined extrapolation and why we should avoid it.

</div>

# Data

## Movie ratings

::: columns
::: {.column width="70%"}
-   Data behind the FiveThirtyEight story [*Be Suspicious Of Online Movie Ratings, Especially Fandango's*](%22Be%20Suspicious%20Of%20Online%20Movie%20Ratings,%20Especially%20Fandango's%22)
-   In the **fivethirtyeight** package: [`fandango`](https://fivethirtyeight-r.netlify.app/reference/fandango.html)
-   Contains every film that has at least 30 fan reviews on Fandango, an IMDb score, Rotten Tomatoes critic and user ratings, and Metacritic critic and user scores
:::

::: {.column width="30%"}
![](images/03/fandango.png){fig-align="center" width="200"}

![](images/03/imdb.png){fig-align="center" width="200"}

![](images/03/rotten-tomatoes.png){fig-align="center" width="200"}

![](images/03/metacritic.png){fig-align="center" width="200"}
:::
:::

## Data prep

-   Rename Rotten Tomatoes columns as `critics` and `audience`
-   Rename the dataset as `movie_scores`

```{r data-prep}
#| echo: true
movie_scores <- fandango |>
  rename(
    critics = rottentomatoes, 
    audience = rottentomatoes_user
  )
```

------------------------------------------------------------------------

$$
\widehat{\text{audience}} = 32.3142 + 0.5187 \times \text{critics}
$$

```{r}
#| echo: false
#| fig-align: center
p <- ggplot(data = movie_scores, mapping = aes(x = critics, y = audience)) +
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "lm", color = "purple", se = FALSE) +
  labs(x = "Critics Score" , 
       y = "Audience Score")

p
```

## tidymodels

::: midi
The **tidymodels** framework is a collection of packages for modeling and machine learning using tidyverse principles.
:::

. . .

```{r}
#| message: true
#| warning: true
library(tidymodels)
```

## Why tidymodels?

-   Consistent syntax for different model types (linear, logistic, random forest, Bayesian, etc.)
-   Streamline modeling workflow
    -   Split data into train and test sets
    -   Transform and create new variables
    -   Assess model performance
    -   Use model for prediction and inference

# Fitting the model

## Step 1: Specify model

```{r}
#| echo: true
linear_reg()
```

## Step 2: **Set model fitting *engine***

```{r}
#| echo: true
#| code-line-numbers: "|2"

linear_reg() |>
  set_engine("lm") # lm: linear model
```

------------------------------------------------------------------------

### Step 3: Fit model & estimate parameters

using **formula syntax**

```{r}
#| echo: true
#| code-line-numbers: "|3"

linear_reg() |>
  set_engine("lm") |>
  fit(audience ~ critics, data = movie_scores)
```

## A closer look at model output

```{r}
#| echo: true
movie_fit <- linear_reg() |>
  set_engine("lm") |>
  fit(audience ~ critics, data = movie_scores)

movie_fit
```

$$\widehat{\text{audience}} = 32.3155 + 0.5187 \times \text{critics}$$

. . .

::: small
**Note:** The intercept is off by a tiny bit from the hand-calculated intercept, this is likely just due to rounding in the hand calculation.
:::

## The regression output

We'll focus on the first column for now...

```{r}
#| echo: true
#| code-line-numbers: "|4"

linear_reg() |>
  set_engine("lm") |>
  fit(audience ~ critics, data = movie_scores) |>
  tidy() 
```

## Prediction

```{r}
#| echo: true
#| code-line-numbers: "|2|5"

# create a data frame for a new movie
new_movie <- tibble(critics = 70)

# predict the outcome for a new movie
predict(movie_fit, new_movie)
```

## Application exercise

::: appex
üìã [github.com/sta210-fa22/ae-02-bikeshare](https://github.com/sta210-fa22/ae-02-bikeshare)
:::

## Recap

-   Introduced the computing toolkit - RStudio and GitHub
-   Used tidymodels to fit and summarize regression models in R
-   Completed an application exercise on exploratory data analysis and modeling
