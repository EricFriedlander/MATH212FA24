---
title: "Simple Linear Regression"
author: "Prof. Eric Friedlander"
date: "2024-08-28"
date-format: "MMM DD, YYYY"
footer: "[ðŸ”— MAT 212 - Fall 2024 -  Schedule](https://mat212fa24.netlify.app/schedule)"
logo: "../images/logo.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: false
    transition: fade
    slide-number: false
    incremental: false 
    chalkboard: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:      
    width: 200
bibliography: references.bib
---


## Topics

-   Use simple linear regression to describe the relationship between a quantitative predictor and quantitative response variable.

-   Estimate the slope and intercept of the regression line using the least squares method.

-   Interpret the slope and intercept of the regression line.

-   Predict the response given a value of the predictor variable.

-   Use R to fit and summarize regression models.

## Computation set up {.smaller}

```{r}
#| echo: true
#| message: false

# load packages
library(tidyverse)       # for data wrangling
library(ggformula)       # for plotting
library(fivethirtyeight) # for the fandango dataset
library(broom)           # for formatting model output
library(knitr)           # for formatting tables

# set default theme and larger font size for ggplot2
ggplot2::theme_set(ggplot2::theme_bw(base_size = 16))

# set default figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.618,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%"
)
```


# Data

## Movie scores

::: columns
::: {.column width="70%"}
-   Data behind the FiveThirtyEight story [*Be Suspicious Of Online Movie Ratings*](https://fivethirtyeight.com/features/fandango-movies-ratings/)[*, Especially Fandango's*](%22Be%20Suspicious%20Of%20Online%20Movie%20Ratings,%20Especially%20Fandango's%22)
-   In the **fivethirtyeight** package: [`fandango`](https://fivethirtyeight-r.netlify.app/reference/fandango.html)
-   Contains every film released in 2014 and 2015 that has at least 30 fan reviews on Fandango, an IMDb score, Rotten Tomatoes critic and user ratings, and Metacritic critic and user scores
:::

::: {.column width="30%"}
![](images/02/fandango.png){fig-alt="Fandango logo" width="200"}

![](images/02/imdb.png){fig-alt="IMDB logo" width="200"}

![](images/02/rotten-tomatoes.png){fig-alt="Rotten Tomatoes logo" width="200"}

![](images/02/metacritic.png){fig-alt="Metacritic logo" width="200"}
:::
:::

## Data prep

-   Rename Rotten Tomatoes columns as `critics` and `audience`
-   Rename the dataset as `movie_scores`

```{r data-prep}
#| echo: true
movie_scores <- fandango |>
  rename(critics = rottentomatoes, 
         audience = rottentomatoes_user)
```

## Data overview

```{r data-overview}
#| echo: true
glimpse(movie_scores)
```


## Movie scores data

The data set contains the "Tomatometer" score (**`critics`**) and audience score (**`audience`**) for 146 movies rated on rottentomatoes.com.

```{r}
#| echo: true
#| code-fold: true
#| fig-align: center

movie_scores |> 
gf_point(audience ~ critics, alpha = 0.5) + 
  labs(x = "Critics Score" , 
       y = "Audience Score")
```

## Movie ratings data

**Goal**: Fit a line to describe the relationship between the critics score and audience score.

```{r}
#| echo: false
#| fig-align: center
p <- ggplot(data = movie_scores, mapping = aes(x = critics, y = audience)) +
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  labs(x = "Critics Score" , 
       y = "Audience Score")

p
```

## Why fit a line?

We fit a line to accomplish one or both of the following:

. . .

::: {style="color: #799100"}
**Prediction**
:::

What is the audience score expected to be for an upcoming movie that received 35% from the critics?\

. . .

::: {style="color : #799100"}
**Inference**
:::

Is the critics score a useful predictor of the audience score? By how much is the audience score expected to change for each additional point in the critics score?

## Terminology

::: columns
::: {.column width="30%"}
-   **Response, *Y***: variable describing the outcome of interest

-   **Predictor, *X***: variable we use to help understand the variability in the response
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| fig-align: center
p 
```
:::
:::

## Regression model

**Regression model:** a function that describes the relationship between a quantitive response, $Y$, and the predictor, $X$ (or many predictors).

```{=tex}
\begin{aligned} Y &= \color{black}{\textbf{Model}} + \text{Error} \\[8pt]
&= \color{black}{\mathbf{f(X)}} + \epsilon \\[8pt]
&= \color{black}{\boldsymbol{\mu_{Y|X}}} + \epsilon \end{aligned}
```

## Regression model

::: columns
::: {.column width="30%"}
```{=tex}
\begin{aligned} Y &= \color{purple}{\textbf{Model}} + \text{Error} \\[8pt]
&= \color{purple}{\mathbf{f(X)}} + \epsilon \\[8pt]
&= \color{purple}{\boldsymbol{\mu_{Y|X}}} + \epsilon \end{aligned}
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| fig-align: center
ggplot(data = movie_scores, mapping = aes(x = critics, y = audience)) +
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "lm", color = "purple", se = FALSE) +
  labs(x = "X" , 
       y = "Y") +
  theme(axis.text = element_blank(),
  axis.ticks.x = element_blank(), 
  axis.ticks.y = element_blank())
```
:::
:::

$\mu_{Y|X}$ is the mean value of $Y$ given a particular value of $X$.

## Regression model

::: columns
::: {.column width="30%"}
$$
\begin{aligned} Y &= \color{purple}{\textbf{Model}} + \color{blue}{\textbf{Error}} \\[5pt]
&= \color{purple}{\mathbf{f(X)}} + \color{blue}{\boldsymbol{\epsilon}} \\[5pt]
&= \color{purple}{\boldsymbol{\mu_{Y|X}}} + \color{blue}{\boldsymbol{\epsilon}} \\[5pt]
 \end{aligned}
$$
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| fig-align: center
m <- lm(audience ~ critics, data = movie_scores)
ggplot(data = movie_scores, mapping = aes(x = critics, y = audience)) +
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "lm", color = "purple", se = FALSE) +
  geom_segment(aes(x=critics, xend=critics, y=audience, yend=predict(m, movie_scores)), color = "blue", linetype = "dotted") +
  labs(x = "X" , 
       y = "Y") +
  theme_bw() +
  theme(axis.text = element_blank(),
  axis.ticks.x = element_blank(), 
  axis.ticks.y = element_blank())
```
:::
:::

# Simple linear regression (SLR)

## SLR: Statistical model

- **Simple linear regression:** model to describe the relationship between $Y$ and $X$ where:
  + $Y$ is a quantitative/numerical reponse
  + $X$ is a *single* quantitative predictor
  +$$\Large{Y = \mathbf{\beta_0 + \beta_1 X} + \epsilon}$$

. . .

-   $\beta_1$: True slope of the relationship between $X$ and $Y$
-   $\beta_0$: True intercept of the relationship between $X$ and $Y$
-   $\epsilon$: Error

## SLR: Regression equation

$$\Large{\hat{Y} = \hat{\beta}_0 + \hat{\beta}_1 X}$$

-   $\hat{\beta}_1$: Estimated slope of the relationship between $X$ and $Y$
-   $\hat{\beta}_0$: Estimated intercept of the relationship between $X$ and $Y$
-   $\hat{Y}$: Predicted value of $Y$ for a given $X$
-   No error term!

## Choosing values for $\hat{\beta}_1$ and $\hat{\beta}_0$

```{r}
#| echo: false
#| fig-align: center
ggplot(data = movie_scores, mapping = aes(x = critics, y = audience)) +
  geom_point(alpha = 0.4) + 
  geom_abline(intercept = 32.296, slope = 0.5187, color = "red") +
  geom_abline(intercept = 25, slope = 0.7, color = "green") +
  geom_abline(intercept = 21, slope = 0.9, color = "blue") +
  geom_abline(intercept = 35, slope = 0.3, color = "purple") +
  labs(x = "Critics Score" , 
       y = "Audience Score")
```

## Residuals

```{r}
#| echo: false
#| fig-align: center
ggplot(data = movie_scores, mapping = aes(x = critics,y = audience)) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method ="lm", color = "red", se = FALSE) + 
  geom_segment(aes(x = critics, xend = critics, y = audience, yend= predict(m, movie_scores)), color = "steel blue", linetype = "dotted") +
  labs(x = "Critics Score" , 
       y = "Audience Score")+
  theme(legend.position = "none")
```

$$\text{residual} = \text{observed} - \text{predicted} = y_i - \hat{y}_i$$

## Least squares line

-  **Residual** for the $i^{th}$ observation:

$$e_i = \text{observed} - \text{predicted}
= y_i - \hat{y}_i$$

-   **Sum of squared residuals**:

$$e^2_1 + e^2_2 + \dots + e^2_n$$

-   **Least squares line** is the one that minimizes the sum of squared residuals

```{r}
#| echo: false
sx <- round(sqrt(var(movie_scores$critics)),4)
sy <- round(sqrt(var(movie_scores$audience)),4)
r <- round(cor(movie_scores$critics, movie_scores$audience),4)
xbar <- round(mean(movie_scores$critics),4)
ybar <- round(mean(movie_scores$audience),4)
```

# Slope and intercept

## Properties of least squares regression {.smaller}

::: incremental
-   Passes through center of mass point, the coordinates corresponding to average $X$ and average $Y$: $\hat{\beta}_0 = \bar{Y} - \hat{\beta}_1\bar{X}$

-   Slope has same sign as the correlation coefficient: $\hat{\beta}_1 = r \frac{s_Y}{s_X}$

    + $r$: correlation coefficient
    + $s_Y, s_X$: sample standard deviations of $X$ and $Y$

-   Sum of the residuals is zero: $\sum_{i = 1}^n e_i \approx 0$

    +   Intuition: Residuals are "balanced"

-   The residuals and $X$ values are uncorrelated
:::

## Estimating the slope

$$\large{\hat{\beta}_1 = r \frac{s_Y}{s_X}}$$

::: columns
::: {.column width="50%"}
```{=tex}
\begin{aligned} 
s_X &= 30.1688 \\
s_Y &=  20.0244 \\
r &= 0.7814
\end{aligned}
```
:::

::: {.column width="50%"}
```{=tex}
\begin{aligned}
\hat{\beta}_1 &= 0.7814 \times \frac{20.0244}{30.1688} \\
&= 0.5187\end{aligned}
```
:::
:::

<br>

::: small
[Clickhere](https://introregression.netlify.app/98-appendix) for details on deriving the equations for slope and intercept which is easy if you know multivariate calculus.
:::

## Estimating the intercept

$$\large{\hat{\beta}_0 = \bar{Y} - \hat{\beta}_1\bar{X}}$$

::: columns
::: {.column width="40%"}
```{=tex}
\begin{aligned}
&\bar{x} = 60.8493 \\
&\bar{y} = 63.8767 \\
&\hat{\beta}_1 = 0.5187
\end{aligned}
```
:::

::: {.column width="60%"}
```{=tex}
\begin{aligned}\hat{\beta}_0 &= 63.8767 - 0.5187 \times 60.8493 \\
&= 32.3142
\end{aligned}
```
:::
:::

<br>

::: small
[Click here](https://introregression.netlify.app/98-appendix) for details on deriving the equations for slope and intercept.
:::



## Interpretation

-  Slope: For each additional unit of $X$ we expect the $Y$ to increase by $\hat{\beta}_1$, on average.
-  Intercept: If $X$ were 0, we predict $Y$ to be $\hat{\beta}_0$

. . .

:::{.question}
For our example, we have $\hat{\beta}_1 = 0.5187$, and $\hat{\beta}_0 = 32.3142$. How would you interpret these values in context?
:::

```{r}
#| echo: false

countdown::countdown(minutes = 2, seconds = 0)
```


## Does it make sense to interpret the intercept?

. . .

`r emo::ji("white_check_mark")` **The intercept is meaningful in the context of the data if**

-   the predictor can feasibly take values equal to or near zero, or

-   there are values near zero in the observed data.

. . .

`r emo::ji("stop_sign")` Otherwise, the intercept may not be meaningful!

# Our first AE!

## Group Work Roles

Any time we are working on AEs, I will randomly assign you to groups of two/three. Each person will have a role:

- **Driver:** Writes code and fills out Quarto template. Responsible for submitting final work.
- **Reporter:**  Share thoughts from group during class discussions
- **Gopher:** Responsible for looking stuff up (e.g. code, cheatsheets, etc.)

You'll stay in your groups for three exercise and then we'll switch (you must rotate your role every class.)

Driver $\to$ Reporter $\to$ Gopher $\to$ Driver

## Application exercise

::: appex
ðŸ“‹ [AE 01 - Movie Budgets and Revenues](https://mat212fa24.netlify.app/ae/ae-01-movies)
:::

# Prediction

## Making a prediction

Suppose that a movie has a critics score of 70. According to this model, what is the movie's predicted audience score?

```{=tex}
\begin{aligned}
\widehat{\text{audience}} &= 32.3142 + 0.5187 \times \text{critics} \\
&= 32.3142 + 0.5187 \times 70 \\
&= 68.6232
\end{aligned}
```

# Fitting the model

## Fit model & estimate parameters

```{r}
#| echo: true
#| code-line-numbers: "|1"

movie_fit <- lm(audience ~ critics, data = movie_scores)
movie_fit
```

## Look at the regression output

```{r}
#| echo: true
#| code-line-numbers: "|2"

movie_fit <- lm(audience ~ critics, data = movie_scores)
movie_fit
```


$$\widehat{\text{audience}} = 32.3155 + 0.5187 \times \text{critics}$$

. . .

::: smallest
**Note:** The intercept is off by a tiny bit from the hand-calculated intercept, this is just due to rounding in the hand calculation.
:::

## The regression output

We'll focus on the first column for now...

```{r}
#| echo: true
#| code-line-numbers: "|2"

movie_fit |> 
  tidy() 
```

## Format output with `kable`

Use the `kable` function from the [knitr](https://yihui.org/knitr/) package to produce a table and specify number of significant digits

```{r}
#| echo: true
#| code-line-numbers: "|3"

movie_fit |> 
  tidy() |>
  kable(digits = 4)
```

## Visualize Model

```{r}
#| echo: true

movie_scores |> 
  gf_point(audience ~ critics) |> 
  gf_lm()
```

## Prediction

```{r}
#| echo: true
#| code-line-numbers: "|2|5"

# create a data frame for a new movie
new_movie <- tibble(critics = 70)

# predict the outcome for a new movie
predict(movie_fit, new_movie)
```

# Wrap up

## Recap

::: {.incremental style="font-size: 0.85em"}
-   Used simple linear regression to describe the relationship between a quantitative predictor and quantitative response variable.

-   Used the least squares method to estimate the slope and intercept.

-   Interpreted the slope and intercept.

    -   **Slope**: For every one unit increase in $x$, we expect y to change by $\hat{\beta}_1$ units, on average.
    -   **Intercept**: If $x$ is 0, then we expect $y$ to be $\hat{\beta}_0$ units

-   Predicted the response given a value of the predictor variable.

-   Used `lm` and the `broom` package to fit and summarize regression models in R.
:::