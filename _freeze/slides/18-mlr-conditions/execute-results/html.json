{
  "hash": "ff0c1c3f5fce571d62cdee271faab27a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MLR: Inference and conditions\"\nauthor: \"Prof. Eric Friedlander\"\ndate: \"2024-10-04\"\ndate-format: \"MMM DD, YYYY\"\nfooter: \"[ðŸ”— MAT 212 - Fall 2024 -  Schedule](https://mat212fa24.netlify.app/schedule)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: false\n    incremental: false \n    chalkboard: true\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nexecute:\n  freeze: auto\n  echo: true\n  cache: false\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib\n---\n\n\n\n\n\n## Announcements\n\n-   Midterm next Friday 10/11 (right before spring break)\n-   Project proposal also due 10/11 but will accept until 10/14 without penalty \n\n## Topics\n\n::: nonincremental\n-   Inference for multiple linear regression\n-   Checking model conditions\n:::\n\n## Computational setup\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.5\nâœ” forcats   1.0.0     âœ” stringr   1.5.1\nâœ” ggplot2   3.5.1     âœ” tibble    3.2.1\nâœ” lubridate 1.9.3     âœ” tidyr     1.3.1\nâœ” purrr     1.0.2     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ISLR2)\nlibrary(patchwork)\nlibrary(knitr)\nlibrary(kableExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:mosaic':\n\n    rescale\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n\n```{.r .cell-code}\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))\n```\n:::\n\n\n\n# Inference for multiple linear regression\n\n\n## Data: Credit Cards\n\nThe data is from the `Credit` data set in the **ISLR2** R package. It is a simulated data set of 400 credit card customers.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 400\nColumns: 11\n$ Income    <dbl> 14.891, 106.025, 104.593, 148.924, 55.882, 80.180, 20.996, 7â€¦\n$ Limit     <dbl> 3606, 6645, 7075, 9504, 4897, 8047, 3388, 7114, 3300, 6819, â€¦\n$ Rating    <dbl> 283, 483, 514, 681, 357, 569, 259, 512, 266, 491, 589, 138, â€¦\n$ Cards     <dbl> 2, 3, 4, 3, 2, 4, 2, 2, 5, 3, 4, 3, 1, 1, 2, 3, 3, 3, 1, 2, â€¦\n$ Age       <dbl> 34, 82, 71, 36, 68, 77, 37, 87, 66, 41, 30, 64, 57, 49, 75, â€¦\n$ Education <dbl> 11, 15, 11, 11, 16, 10, 12, 9, 13, 19, 14, 16, 7, 9, 13, 15,â€¦\n$ Own       <fct> No, Yes, No, Yes, No, No, Yes, No, Yes, Yes, No, No, Yes, Noâ€¦\n$ Student   <fct> No, Yes, No, No, No, No, No, No, No, Yes, No, No, No, No, Noâ€¦\n$ Married   <fct> Yes, Yes, No, No, Yes, No, No, No, No, Yes, Yes, No, Yes, Yeâ€¦\n$ Region    <fct> South, West, West, West, South, South, East, West, South, Eaâ€¦\n$ Balance   <dbl> 333, 903, 580, 964, 331, 1151, 203, 872, 279, 1350, 1407, 0,â€¦\n```\n\n\n:::\n:::\n\n\n\n\n## Variables\n\n**Features (another name for predictors)**\n\n-   `Income`: Annual income (in 1000's of US dollars)\n-   `Rating`: Credit Rating\n\n**Outcome**\n\n-   `Limit`: Credit limit\n\n# Conduct a hypothesis test for $\\beta_j$\n\n## [Review: Simple linear regression (SLR)]{.r-fit-text}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngf_point(Limit ~ Rating, data = Credit, alpha = 0.5) |> \n  gf_lm()  |> \n  gf_labs(x = \"Credit Rating\", y = \"Income\") |> \n  gf_refine(scale_y_continuous(labels = dollar_format()),\n            scale_x_continuous(labels = dollar_format()))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using the `size` aesthetic with geom_line was deprecated in ggplot2 3.4.0.\nâ„¹ Please use the `linewidth` aesthetic instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](18-mlr-conditions_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=3000}\n:::\n:::\n\n\n\n## SLR model summary\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nincome_slr_fit <- lm(Limit ~ Income, data = Credit)\n\ntidy(income_slr_fit) |> kable()\n```\n\n::: {.cell-output-display}\n\n\n|term        |   estimate|  std.error| statistic| p.value|\n|:-----------|----------:|----------:|---------:|-------:|\n|(Intercept) | 2389.86941| 114.828758|  20.81246|       0|\n|Income      |   51.87502|   2.003836|  25.88785|       0|\n\n\n:::\n:::\n\n\n\n\n## SLR hypothesis test {.midi}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |  2389.87|    114.83|     20.81|       0|\n|Income      |    51.88|      2.00|     25.89|       0|\n\n\n:::\n:::\n\n\n\n1.  **Set hypotheses:** $H_0: \\beta_1 = 0$ vs. $H_A: \\beta_1 \\ne 0$\n\n. . .\n\n2.  **Calculate test statistic and p-value:** The test statistic is $t= 25.89$ . The p-value is calculated using a $t$ distribution with 399 degrees of freedom. The p-value is $\\approx 0$ .\n\n. . .\n\n3.  **State the conclusion:** The p-value is small, so we reject $H_0$. The data provide strong evidence that income is a helpful predictor for a credit card holder's credit limit, i.e. there is a linear relationship between income and credit limit.\n\n## Multiple linear regression\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncredit_fit <- lm(Limit ~ Rating + Income, data = Credit)\n\ntidy(credit_fit) |> kable(digits = 2)\n```\n\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |  -532.47|     24.17|    -22.03|    0.00|\n|Rating      |    14.77|      0.10|    153.12|    0.00|\n|Income      |     0.56|      0.42|      1.32|    0.19|\n\n\n:::\n:::\n\n\n\n## Multiple linear regression\n\nThe multiple linear regression model assumes $$Y|X_1, X_2,  \\ldots, X_p \\sim N(\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\dots + \\beta_p X_p, \\sigma_\\epsilon^2)$$\n\n. . .\n\nFor a given observation $(x_{i1}, x_{i2}, \\ldots, x_{ip}, y_i)$, we can rewrite the previous statement as\n\n$$y_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\dots + \\beta_p x_{ip} + \\epsilon_{i}, \\hspace{10mm} \\epsilon_i \\sim N(0,\\sigma_{\\epsilon}^2)$$\n\n------------------------------------------------------------------------\n\n## Estimating $\\sigma_\\epsilon$\n\nFor a given observation $(x_{i1}, x_{i2}, \\ldots,x_{ip}, y_i)$ the residual is\n$$\n\\begin{aligned}\ne_i &= y_{i} - \\hat{y_i}\\\\\n&= y_i - (\\hat{\\beta}_0 + \\hat{\\beta}_1 x_{i1} + \\hat{\\beta}_{2} x_{i2} + \\dots + \\hat{\\beta}_p x_{ip})\n\\end{aligned}\n$$\n\n. . .\n\nThe estimated value of the regression standard error , $\\sigma_{\\epsilon}$, is\n\n$$\\hat{\\sigma}_\\epsilon  = \\sqrt{\\frac{\\sum_{i=1}^ne_i^2}{n-p-1}}$$\n\n. . .\n\nAs with SLR, we use $\\hat{\\sigma}_{\\epsilon}$ to calculate $SE_{\\hat{\\beta}_j}$, the standard error of each coefficient. See [Matrix Form of Linear Regression](https://github.com/STA210-Sp19/supplemental-notes/blob/master/regression-basics-matrix.pdf) for more detail.\n\n## MLR hypothesis test: Income {.midi}\n\n1.  **Set hypotheses:** $H_0: \\beta_{Income} = 0$ vs. $H_A: \\beta_{Income} \\ne 0$, given `Rating` is in the model\n\n. . .\n\n2.  **Calculate test statistic and p-value:** The test statistic is $t = 1.32$. The p-value is calculated using a $t$ distribution with $$(n - p - 1) = 400 - 2 -1 = 398$$ degrees of freedom. The p-value is $\\approx 0.19$.\n\n. . .\n\n3.  **State the conclusion:** The p-value is not small, so we fail to reject $H_0$. The data does not provide convincing evidence that a borrowers income is a useful predictor in a model that already contains credit rating as a predictor for the credit limit of a borrower.\n\n::: appex\nComplete Exercises 1-2.\n:::\n\n\n# Confidence interval for $\\beta_j$\n\n## Confidence interval for $\\beta_j$ {.midi}\n\n-   The $C\\%$ confidence interval for $\\beta_j$ $$\\hat{\\beta}_j \\pm t^* SE(\\hat{\\beta}_j)$$ where $t^*$ follows a $t$ distribution with $n - p - 1$ degrees of freedom.\n\n-   **Generically**: We are $C\\%$ confident that the interval LB to UB contains the population coefficient of $x_j$.\n\n-   **In context:** We are $C\\%$ confident that for every one unit increase in $x_j$, we expect $y$ to change by LB to UB units, holding all else constant.\n\n::: appex\nComplete Exercise 3.\n:::\n\n## Confidence interval for $\\beta_j$\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value| conf.low| conf.high|\n|:-----------|--------:|---------:|---------:|-------:|--------:|---------:|\n|(Intercept) |  -532.47|     24.17|    -22.03|    0.00|  -579.99|   -484.95|\n|Rating      |    14.77|      0.10|    153.12|    0.00|    14.58|     14.96|\n|Income      |     0.56|      0.42|      1.32|    0.19|    -0.28|      1.39|\n\n\n:::\n:::\n\n\n\n\n# Inference pitfalls\n\n## Large sample sizes\n\n::: callout-caution\nIf the sample size is large enough, the test will likely result in rejecting $H_0: \\beta_j = 0$ even $x_j$ has a very small effect on $y$.\n\n::: nonincremental\n-   Consider the **practical significance** of the result not just the statistical significance.\n\n-   Use the confidence interval to draw conclusions instead of relying only p-values.\n:::\n:::\n\n## Small sample sizes\n\n::: callout-caution\nIf the sample size is small, there may not be enough evidence to reject $H_0: \\beta_j=0$.\n\n::: nonincremental\n-   When you fail to reject the null hypothesis, **DON'T** immediately conclude that the variable has no association with the response.\n\n-   There may be a linear association that is just not strong enough to detect given your data, or there may be a non-linear association.\n:::\n:::\n\n::: appex\nComplete exercise 4\n:::\n\n\n<!-- # Conditions for inference -->\n\n<!-- ## Full model {.smaller} -->\n\n<!-- Including all available predictors -->\n\n<!-- **Fit:** -->\n\n<!-- ```{r} -->\n<!-- rt_full_fit <- lm(volume ~ ., data = Credit) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- **Summarize:** -->\n\n<!-- ```{r} -->\n<!-- tidy(rt_full_fit) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- **Augment:** -->\n\n<!-- ```{r} -->\n<!-- rt_full_aug <- augment(rt_full_fit) -->\n<!-- ``` -->\n\n<!-- ## Model conditions -->\n\n<!-- 1.  **Linearity:** There is a linear relationship between the response and predictor variables. -->\n\n<!-- 2.  **Constant Variance:** The variability about the least squares line is generally constant. -->\n\n<!-- 3.  **Normality:** The distribution of the residuals is approximately normal. -->\n\n<!-- 4.  **Independence:** The residuals are independent from each other. -->\n\n\n<!-- ## Checking Linearity -->\n\n<!-- -   Look at a plot of the residuals vs. predicted values -->\n\n<!-- -   Look at a plot of the residuals vs. each predictor -->\n\n<!-- -   Linearity is met if there is no discernible pattern in each of these plots -->\n\n<!-- ## Residuals vs. predicted values -->\n\n<!-- ```{r} -->\n<!-- #| label: main_res_pred -->\n\n<!-- gf_point(.resid ~ .fitted, data = rt_full_aug, alpha = 0.7) |>  -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") |>  -->\n<!--   gf_labs(x = \"Predicted values\", y = \"Residuals\") -->\n<!-- ``` -->\n\n<!-- ## Residuals vs. each predictor -->\n\n<!-- ```{r} -->\n<!-- #| fig.asp: 0.5 -->\n<!-- #| echo: false -->\n\n<!-- p1 <- gf_point(.resid ~ hightemp, data = rt_full_aug, alpha = 0.7) |>   -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") -->\n\n<!-- p2 <- gf_point(.resid ~ avgtemp, data = rt_full_aug, alpha = 0.7) |>   -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") -->\n\n<!-- p3 <- gf_boxplot(.resid ~ season, data = rt_full_aug, alpha = 0.7) |>   -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") -->\n\n<!-- p4 <- gf_point(.resid ~ cloudcover, data = rt_full_aug, alpha = 0.7) |>   -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") -->\n\n<!-- p5 <- gf_point(.resid ~ precip, data = rt_full_aug, alpha = 0.7) |>   -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") -->\n\n<!-- p6 <- gf_boxplot(.resid ~ day_type, data = rt_full_aug, alpha = 0.7) |>   -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") -->\n\n<!-- (p1 + p2 + p3) / (p4 + p5 + p6) -->\n<!-- ``` -->\n\n<!-- ## Checking linearity -->\n\n<!-- -   The plot of the residuals vs. predicted values looked OK -->\n\n<!-- -   The plots of residuals vs. `hightemp` and `avgtemp` appear to have a parabolic pattern. -->\n\n<!-- -   The linearity condition does not appear to be satisfied given these plots. -->\n\n<!-- . . . -->\n\n<!-- ::: question -->\n<!-- Given this conclusion, what might be a next step in the analysis? -->\n<!-- ::: -->\n\n<!-- ## Checking constant variance -->\n\n<!-- ::: question -->\n<!-- Does the constant variance condition appear to be satisfied? -->\n<!-- ::: -->\n\n<!-- ```{r} -->\n<!-- #| ref.label: main_res_pred -->\n<!-- #| echo: false -->\n<!-- ``` -->\n\n<!-- ## Checking constant variance -->\n\n<!-- -   The vertical spread of the residuals is not constant across the plot. -->\n\n<!-- -   The constant variance condition is not satisfied. -->\n\n<!-- . . . -->\n\n<!-- ::: question -->\n<!-- We will talk about to address this later in the notes. -->\n<!-- ::: -->\n\n<!-- ## Checking normality -->\n\n<!-- ```{r} -->\n<!-- #| fig.asp: 0.8 -->\n<!-- #| echo: false -->\n\n<!-- resid_hist <- ggplot(rt_full_aug, aes(x = .resid)) + -->\n<!--   geom_histogram(binwidth = 25) + -->\n<!--   labs(x = \"Residuals\")   -->\n\n<!-- resid_hist -->\n<!-- ``` -->\n\n<!-- The distribution of the residuals is approximately unimodal and symmetric, so the normality condition is satisfied. The sample size 90 is sufficiently large to relax this condition if it was not satisfied. -->\n\n<!-- ## Checking independence -->\n\n<!-- -   We can often check the independence condition based on the context of the data and how the observations were collected. -->\n\n<!-- -   If the data were collected in a particular order, examine a scatterplot of the residuals versus order in which the data were collected. -->\n\n<!-- -   If there is a grouping variable lurking in the background, check the residuals based on that grouping variable. -->\n\n<!-- ## Checking independence {.midi} -->\n\n<!-- Residuals vs. order of data collection: -->\n\n<!-- ```{r} -->\n<!-- gf_line(.resid ~ 1:nrow(rt_full_aug), data = rt_full_aug) |>  -->\n<!--   gf_point()  |>  -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\")  |>  -->\n<!--   gf_labs(x = \"Order of data collection\", y = \"Residuals\") -->\n<!-- ``` -->\n\n<!-- ## Checking independence -->\n\n<!-- -   No clear pattern in the residuals vs. order of data collection plot. -->\n\n<!-- -   Independence condition appears to be satisfied, as far as we can evaluate it. -->\n\n<!-- # Multicollinearity -->\n\n<!-- ## What is multicollinearity -->\n\n<!-- **Multicollinearity** is the case when two or more predictor variables are strongly correlated with one another -->\n\n<!-- ## Example -->\n\n<!-- Let's assume the true population regression equation is $y = 3 + 4x$ -->\n\n<!-- . . . -->\n\n<!-- Suppose we try estimating that equation using a model with variables $x$ and $z = x/10$ -->\n\n<!-- $$ -->\n<!-- \\begin{aligned}\\hat{y}&= \\hat{\\beta}_0 + \\hat{\\beta}_1x  + \\hat{\\beta}_2z\\\\ -->\n<!-- &= \\hat{\\beta}_0 + \\hat{\\beta}_1x  + \\hat{\\beta}_2\\frac{x}{10}\\\\ -->\n<!-- &= \\hat{\\beta}_0 + \\bigg(\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10}\\bigg)x -->\n<!-- \\end{aligned} -->\n<!-- $$ -->\n\n<!-- ## Example -->\n\n<!-- $$\\hat{y} = \\hat{\\beta}_0 + \\bigg(\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10}\\bigg)x$$ -->\n\n<!-- -   We can set $\\hat{\\beta}_1$ and $\\hat{\\beta}_2$ to any two numbers such that $\\hat{\\beta}_1 + \\frac{\\hat{\\beta}_2}{10} = 4$ -->\n\n<!-- -   Therefore, we are unable to choose the \"best\" combination of $\\hat{\\beta}_1$ and $\\hat{\\beta}_2$ -->\n\n<!-- ## Why multicollinearity is a problem -->\n\n<!-- -   When we have perfect collinearities, we are unable to get estimates for the coefficients -->\n\n<!--     -   When we have almost perfect collinearities (i.e. highly correlated predictor variables), the standard errors for our regression coefficients inflate -->\n\n<!--     -   In other words, we lose precision in our estimates of the regression coefficients -->\n\n<!--     -   This impedes our ability to use the model for inference -->\n\n<!--     -   It is also difficult to interpret the model coefficients -->\n\n<!-- ## Detecting Multicollinearity {.midi} -->\n\n<!-- Multicollinearity may occur when... -->\n\n<!-- -   There are very high correlations $(r > 0.9)$ among two or more predictor variables, especially when the sample size is small -->\n\n<!-- <!-- --> -->\n\n<!-- -   One (or more) predictor variables is an almost perfect linear combination of the others -->\n\n<!-- -   There is a quadratic term in the model without mean-centering the variable first -->\n\n<!-- -   There are interactions between two or more continuous variables -->\n\n<!--     -   Can reduce this by mean-centering the variables first -->\n\n<!-- -   There is a categorical predictor with very few observations in the baseline level -->\n\n<!-- ## Detecting multicollinearity in the EDA -->\n\n<!-- -   Look at a correlation matrix of the predictor variables, including all indicator variables -->\n<!--     -   Look out for values close to 1 or -1 -->\n<!-- -   Look at a scatterplot matrix of the predictor variables -->\n<!--     -   Look out for plots that show a relatively linear relationship -->\n<!-- -   Look at the distribution of categorical predictors and avoid setting the baseline to a category with very few observations -->\n\n\n<!-- ## Detecting Multicollinearity (VIF) -->\n\n<!-- **Variance Inflation Factor (VIF)**: Measure of multicollinearity in the regression model -->\n\n<!-- $$VIF(\\hat{\\beta}_j) = \\frac{1}{1-R^2_{X_j|X_{-j}}}$$ -->\n\n<!-- where $R^2_{X_j|X_{-j}}$ is the proportion of variation $X$ that is explained by the linear combination of the other explanatory variables in the model. -->\n\n<!-- ## Detecting Multicollinearity (VIF) -->\n\n<!-- -   Typically $VIF > 5$ indicates concerning multicollinearity -->\n\n<!-- -   Variables with similar values of VIF are typically the ones correlated with each other -->\n\n<!-- -   Use the `vif()` function in the **rms** R package to calculate VIF -->\n\n<!-- ## VIF for rail trail model -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n\n<!-- vif(rt_full_fit) -->\n<!-- ``` -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- `hightemp`, `avgtemp`, and `seasonSummer` are correlated.  -->\n\n<!-- ## Solutions for Multicollinearity -->\n\n<!-- 1. Drop some predictors -->\n<!-- 2. Combine some predictors -->\n<!-- 3. Discount the individual coefficients and t-tests (i.e. predictions are meaningful but coefficients, tests, and confidence intervals are not) -->\n\n<!-- . . . -->\n\n<!-- Let's try removing `hightemp` and `avgtemp` (separately) -->\n\n<!-- ## Model without `hightemp` {.smaller} -->\n\n<!-- ```{r} -->\n<!-- m1 <- lm(volume ~ . - hightemp, data = Credit) -->\n\n<!-- m1 |> -->\n<!--   tidy() |> -->\n<!--   kable(digits = 3) -->\n<!-- ``` -->\n\n<!-- ## Model without `avgtemp` {.smaller} -->\n\n<!-- ```{r} -->\n<!-- m2 <- lm(volume ~ . - avgtemp, data = Credit) -->\n\n<!-- m2 |> -->\n<!--   tidy() |> -->\n<!--   kable(digits = 3) -->\n<!-- ``` -->\n\n<!-- ## Choosing a model {.midi} -->\n\n<!-- Model without **hightemp**: -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n\n<!-- glance(m1) |> -->\n<!--   select(adj.r.squared, AIC, BIC) |> kable(digits = 2) -->\n<!-- ``` -->\n\n<!-- Model without **avgtemp**: -->\n\n<!-- ```{r echo = F} -->\n<!-- #| echo: false -->\n\n<!-- glance(m2) |> -->\n<!--   select(adj.r.squared, AIC, BIC) |> kable(digits = 2) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- Based on Adjusted $R^2$, AIC, and BIC, the model without **avgtemp** is a better fit. Therefore, we choose to remove **avgtemp** from the model and leave **hightemp** in the model to deal with the multicollinearity. -->\n\n<!-- ## Selected model (for now) -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- tidy(m2) |> -->\n<!--   kable(digits = 3) -->\n<!-- ``` -->\n\n<!-- # Variable transformations -->\n\n<!-- ## Topics -->\n\n<!-- -   Log transformation on the response variable -->\n\n<!-- -   Log transformation on the predictor variable -->\n\n<!-- ## Residuals vs. fitted for the selected model {.midi} -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n\n<!-- m2_aug <- augment(m2) -->\n\n<!-- resid_orig <- gf_point(.resid ~ .fitted, data = m2_aug, alpha = 0.7) |>  -->\n<!--   gf_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") |>  -->\n<!--   gf_labs(x = \"Predicted values\", y = \"Residuals\",  -->\n<!--         title=\"Residuals vs. Predicted\",  -->\n<!--        subtitle = \"Selected model (without avgtemp)\") -->\n\n<!-- resid_orig -->\n\n<!-- ``` -->\n\n<!-- The constant variance condition is not satisfied. We can transform the response variable to address the violation in this condition. -->\n\n<!-- # Log transformation on the response variable -->\n\n<!-- ## Identifying a need to transform $Y$ {.midi} -->\n\n<!-- -   Typically, a \"fan-shaped\" residual plot indicates the need for a transformation of the response variable $Y$ -->\n<!--     -   There are multiple ways to transform a variable, e.g., $\\sqrt{Y}$, $1/Y$, $\\log(Y)$ -->\n<!--     -   $\\log(Y)$ the most straightforward to interpret, so we use that transformation when possible -->\n\n<!-- . . . -->\n\n<!-- -   When building a model: -->\n<!--     -   Choose a transformation and build the model on the transformed data -->\n<!--     -   Reassess the residual plots -->\n<!--     -   If the residuals plots did not sufficiently improve, try a new transformation! -->\n\n<!-- ## Log transformation on $Y$ -->\n\n<!-- -   If we apply a log transformation to the response variable, we want to estimate the parameters for the statistical model -->\n\n<!-- $$ -->\n<!-- \\log(Y) = \\beta_0+ \\beta_1 X_1 + \\dots +\\beta_pX_p + \\epsilon, \\hspace{10mm} \\epsilon \\sim N(0,\\sigma^2_\\epsilon) -->\n<!-- $$ -->\n\n<!-- -   The regression equation is -->\n\n<!-- $$\\widehat{\\log(Y)} = \\hat{\\beta}_0+ \\hat{\\beta}_1 X + \\dots + \\hat{\\beta}_pX_p$$ -->\n\n<!-- ## Log transformation on $Y$ -->\n\n<!-- We want to interpret the model in terms of the original variable $Y$, not $\\log(Y)$, so we need to write the regression equation in terms of $Y$ -->\n\n<!-- $$\\begin{align}\\hat{Y} &= \\exp\\{\\hat{\\beta}_0 + \\hat{\\beta}_1 X + \\dots + \\hat{\\beta}_PX_P\\}\\\\ &= \\exp\\{\\hat{\\beta}_0\\}\\exp\\{\\hat{\\beta}_1X\\}\\dots\\exp\\{\\hat{\\beta}_pX_p\\}\\end{align}$$ -->\n\n<!-- ::: callout-note -->\n<!-- The predicted value $\\hat{Y}$ is the predicted *median* of $Y$. Note, when the distribution of $Y|X_1, \\ldots, X_p$ is symmetric, then the median equals the mean. See the slides in the [appendix] for more detail. -->\n<!-- ::: -->\n\n<!-- ## Model interpretation {.midi} -->\n\n<!-- $$\\begin{align}\\hat{Y} &= \\exp\\{\\hat{\\beta}_0 + \\hat{\\beta}_1 X + \\dots + \\hat{\\beta}_PX_P\\}\\\\ &= \\exp\\{\\hat{\\beta}_0\\}\\exp\\{\\hat{\\beta}_1X\\}\\dots\\exp\\{\\hat{\\beta}_pX_p\\}\\end{align}$$ -->\n\n<!-- . . . -->\n\n<!-- -   **Intercept**: When $X_1 = \\dots = X_p =0$, $Y$ is expected to be $\\exp\\{\\hat{\\beta}_0\\}$ -->\n\n<!-- -   **Slope:** For every one unit increase in $X_j$, the $Y$ is expected to multiply by a factor of $\\exp\\{\\hat{\\beta}_j\\}$, holding all else constant -->\n\n<!-- ::: question -->\n<!-- Why is the interpretation in terms of a multiplicative change? -->\n<!-- ::: -->\n\n<!-- ## Model for $log(volume)$ {.midi} -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n<!-- #fit model -->\n<!-- log_rt_fit <- lm(log(volume) ~ hightemp + season + cloudcover + precip + day_type, data = Credit) -->\n\n<!-- tidy(log_rt_fit) |> -->\n<!--   kable(digits = 3) -->\n<!-- ``` -->\n\n<!-- ## Interpretation of model for $\\log(volume)$ {.midi} -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n\n<!-- tidy(log_rt_fit) |> -->\n<!--   kable(digits = 3) -->\n\n<!-- ``` -->\n\n<!-- ::: question -->\n<!-- -   Interpret the intercept in terms of (1) `log(volume)` and (2) `volume`. -->\n\n<!-- -   Interpret the coefficient of `hightemp` in terms of (1) `log(volume)` and (2) `volume`. -->\n<!-- ::: -->\n\n<!-- ## Residuals for model with $\\log(volume)$ -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- resp_logy_aug <- augment(log_rt_fit) -->\n\n<!-- resid_logy <- ggplot(data = resp_logy_aug, aes(x = .fitted, y = .resid)) + -->\n<!--   geom_point(alpha = 0.7) +  -->\n<!--   geom_hline(yintercept=0, color=\"red\") + -->\n<!--   labs(x=\"Predicted values\", y=\"Residuals\", -->\n<!--        title=\"Residuals vs. Predicted\",  -->\n<!--        subtitle = \"Log-transformed Y\") -->\n\n<!-- resid_logy -->\n<!-- ``` -->\n\n<!-- ## Compare residual plots -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n\n<!-- resid_orig <- ggplot(data = rt_full_aug, aes(x = .fitted, y = .resid)) + -->\n<!--   geom_point(alpha = 0.7) + -->\n<!--   geom_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") + -->\n<!--   labs(x = \"Predicted values\", y = \"Residuals\",  -->\n<!--         title=\"Residuals vs. Predicted\",  -->\n<!--        subtitle = \"Original Y\") -->\n\n\n<!-- resid_orig + resid_logy -->\n<!-- ``` -->\n\n\n<!-- # Log transformation on a predictor variable -->\n\n<!-- ## Log Transformation on $X$ -->\n\n<!-- ```{r} -->\n<!-- #| echo: FALSE -->\n<!-- set.seed(1) -->\n\n<!-- s <- ggplot2::diamonds |> sample_n(100) -->\n<!-- p1 <- ggplot(data=s,aes(x=carat,y=log(price)))+ -->\n<!--   geom_point(color=\"blue\")+ -->\n<!--   ggtitle(\"Scatterplot\")+ -->\n<!--   xlab(\"X\")+ -->\n<!--   ylab(\"Y\") -->\n\n<!-- mod2 <- lm(log(price) ~ carat, data=s) -->\n<!-- s <- s |> mutate(residuals = resid(mod2), predicted = predict(mod2)) -->\n<!-- p2 <- ggplot(data=s,aes(x=predicted, y=residuals)) +  -->\n<!-- geom_point(alpha = 0.7)+ -->\n<!-- geom_hline(yintercept=0,color=\"red\") + -->\n<!--   ggtitle(\"Residual vs. Predicted\")+ -->\n<!--   xlab(\"Predicted\")+ -->\n<!--   ylab(\"residuals\")  -->\n\n<!-- p1 + p2 + plot_annotation(title = \"Example data\") -->\n<!-- ``` -->\n\n<!-- Try a transformation on $X$ if the scatterplot shows some curvature but the variance is constant for all values of $X$ -->\n\n<!-- ## Respiratory Rate vs. Age {.midi} -->\n\n<!-- -   A high respiratory rate can potentially indicate a respiratory infection in children. In order to determine what indicates a \"high\" rate, we first want to understand the relationship between a child's age and their respiratory rate. -->\n\n<!-- -   The data contain the respiratory rate for 618 children ages 15 days to 3 years. It was obtained from the **Sleuth3** R package and is originally form a 1994 publication \"Reference Values for Respiratory Rate in the First 3 Years of Life\". -->\n\n<!-- -   **Variables**: -->\n\n<!--     -   `Age`: age in months -->\n<!--     -   `Rate`: respiratory rate (breaths per minute) -->\n\n<!-- ## Rate vs. Age -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n\n<!-- library(Sleuth3) -->\n<!-- ggplot(data=ex0824 ,aes(x=Age,y=Rate)) +  -->\n<!--   geom_point(alpha = 0.7)  + -->\n<!--   geom_smooth(se = FALSE) + -->\n<!--   ggtitle(\"Respiratory Rate vs. Age\") +  -->\n<!--   xlab(\"Age in months\")+ -->\n<!--   ylab(\"Respiratory Rate in breaths per minute\") -->\n<!-- ``` -->\n\n<!-- ## Model with Transformation on $X$ {.midi} -->\n\n<!-- Suppose we have the following regression equation: -->\n\n<!-- $$\\hat{Y} = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\log(X)$$ -->\n\n<!-- . . . -->\n\n<!-- -   **Intercept:** When $X = 1$ $(\\log(X) = 0)$, $Y$ is expected to be $\\hat{\\beta}_0$ (i.e. the mean of $Y$ is $\\hat{\\beta}_0$) -->\n\n<!-- -   **Slope:** When $X$ is multiplied by a factor of $\\mathbf{C}$, the mean of $Y$ is expected to increase by $\\boldsymbol{\\hat{\\beta}_1}\\mathbf{\\log(C)}$ units -->\n\n<!--     -   **Example**: when $X$ is multiplied by a factor of 2, $Y$ is expected to increase by $\\boldsymbol{\\hat{\\beta}_1}\\mathbf{\\log(2)}$ units -->\n\n<!-- ## Model interpretation -->\n\n<!-- ```{r} -->\n<!-- #| echo: FALSE -->\n<!-- resp_logx_fit <- lm(Rate ~ log(Age), data = ex0824) -->\n\n<!-- tidy(resp_logx_fit) |> -->\n<!--   kable(digits = 3) -->\n<!-- ``` -->\n\n<!-- $$\\hat{\\text{Rate}} = 50.135 - 5.982 \\times \\log\\text{(Age)}$$ -->\n\n<!-- ::: question -->\n<!-- -   Interpret the intercept in the context of the data. -->\n\n<!-- -   Interpret the slope in terms of age multiplying by 2 in the context of the data. -->\n<!-- ::: -->\n\n<!-- ## Learn more -->\n\n<!-- See [Log Transformations in Linear Regression](https://github.com/sta210-sp20/supplemental-notes/blob/master/log-transformations.pdf) for more details about interpreting regression models with log-transformed variables. -->\n\n<!-- # Appendix -->\n\n<!-- ## Why $Median(Y|X)$ instead of $\\mu_{Y|X}$ -->\n\n<!-- Suppose we have a set of values -->\n\n<!-- ```{r echo = TRUE} -->\n<!-- x <- c(3, 5, 6, 8, 10, 14, 19) -->\n<!-- ``` -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"50%\"} -->\n<!-- Let's calculate $\\overline{\\log(x)}$ -->\n\n<!-- ```{r, echo = TRUE} -->\n<!-- log_x <- log(x) -->\n<!-- mean(log_x) -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- Let's calculate $\\log(\\bar{x})$ -->\n\n<!-- ```{r, echo = TRUE} -->\n<!-- xbar <- mean(x) -->\n<!-- log(xbar) -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- Note: $\\overline{\\log(x)} \\neq \\log(\\bar{x})$ -->\n\n<!-- ## Why $Median(Y|X)$ instead of $\\mu_{Y|X}$ -->\n\n<!-- ```{r echo = TRUE} -->\n<!-- x <- c(3, 5, 6, 8, 10, 14, 19) -->\n<!-- ``` -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"50%\"} -->\n<!-- Let's calculate $\\text{Median}(\\log(x))$ -->\n\n<!-- ```{r , echo = TRUE} -->\n<!-- log_x <- log(x) -->\n<!-- median(log_x) -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- Let's calculate $\\log(\\text{Median}(x))$ -->\n\n<!-- ```{r, echo = TRUE} -->\n<!-- median_x <- median(x) -->\n<!-- log(median_x) -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- <br> -->\n\n<!-- . . . -->\n\n<!-- Note: $\\text{Median} (\\log(x)) = \\log(\\text{Median}(x))$ -->\n\n<!-- ## Mean, Median, and Log -->\n\n<!-- ```{r} -->\n<!-- x <- c(3, 5, 6, 8, 10, 14, 19) -->\n<!-- ``` -->\n\n<!-- $$\\overline{\\log(x)} \\neq \\log(\\bar{x})$$ -->\n\n<!-- ```{r echo = T} -->\n<!-- mean(log_x) == log(xbar) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- $$\\text{Median}(\\log(x)) = \\log(\\text{Median}(x))$$ -->\n\n<!-- ```{r echo = T} -->\n<!-- median(log_x) == log(median_x) -->\n<!-- ``` -->\n\n<!-- ## Mean and median of $\\log(Y)$ -->\n\n<!-- -   Recall that $Y = \\beta_0 + \\beta_1 X$ is the **mean** value of the response at the given value of the predictor $X$. This doesn't hold when we log-transform the response variable. -->\n\n<!-- -   Mathematically, the mean of the logged values is **not** necessarily equal to the log of the mean value. Therefore at a given value of $X$ -->\n\n<!-- . . . -->\n\n<!-- $$ -->\n<!-- \\begin{aligned}\\exp\\{\\text{Mean}(\\log(Y|X))\\} \\neq \\text{Mean}(Y|X) \\\\[5pt] -->\n<!-- \\Rightarrow \\exp\\{\\beta_0 + \\beta_1 X\\} \\neq \\text{Mean}(Y|X) \\end{aligned} -->\n<!-- $$ -->\n\n<!-- ## Mean and median of $\\log(y)$ -->\n\n<!-- -   However, the median of the logged values **is** equal to the log of the median value. Therefore, -->\n\n<!-- $$\\exp\\{\\text{Median}(\\log(Y|X))\\} = \\text{Median}(Y|X)$$ -->\n\n<!-- . . . -->\n\n<!-- -   If the distribution of $\\log(Y)$ is symmetric about the regression line, for a given value $X$, we can expect $Mean(Y)$ and $Median(Y)$ to be approximately equal. -->\n\n\n\n\n",
    "supporting": [
      "18-mlr-conditions_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}