{
  "hash": "28735f5a9d536e40276240a4d2c5e9e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simple Linear Regression\"\nsubtitle: \"Prediction + Using R\"\nauthor: \"Prof. Eric Friedlander\"\ndate: \"2024-08-30\"\ndate-format: \"MMM DD, YYYY\"\nfooter: \"[ðŸ”— MAT 212 - Fall 2024 -  Schedule](https://mat212fa24.netlify.app/schedule)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: false\n    incremental: false \n    chalkboard: true\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib\n---\n\n\n## Last Time\n\n::: {.incremental style=\"font-size: 0.85em\"}\n-   Used simple linear regression to describe the relationship between a quantitative predictor and quantitative response variable.\n\n-   Used the least squares method to estimate the slope and intercept.\n\n-   Interpreted the slope and intercept.\n\n    -   **Slope**: For every one unit increase in $x$, we expect y to change by $\\hat{\\beta}_1$ units, on average.\n    -   **Intercept**: If $x$ is 0, then we expect $y$ to be $\\hat{\\beta}_0$ units\n:::\n\n\n## Topics\n\n-   Predict the response given a value of the predictor variable.\n\n-   Use R to fit and summarize regression models.\n\n## Computation set up {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)       # for data wrangling\nlibrary(ggformula)       # for plotting\nlibrary(fivethirtyeight) # for the fandango dataset\nlibrary(broom)           # for formatting model output\nlibrary(knitr)           # for formatting tables\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_bw(base_size = 16))\n\n# set default figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 8,\n  fig.asp = 0.618,\n  fig.retina = 3,\n  dpi = 300,\n  out.width = \"80%\"\n)\n```\n:::\n\n\n\n# Data\n\n## Movie scores\n\n::: columns\n::: {.column width=\"70%\"}\n-   Data behind the FiveThirtyEight story [*Be Suspicious Of Online Movie Ratings*](https://fivethirtyeight.com/features/fandango-movies-ratings/)[*, Especially Fandango's*](%22Be%20Suspicious%20Of%20Online%20Movie%20Ratings,%20Especially%20Fandango's%22)\n-   In the **fivethirtyeight** package: [`fandango`](https://fivethirtyeight-r.netlify.app/reference/fandango.html)\n-   Contains every film released in 2014 and 2015 that has at least 30 fan reviews on Fandango, an IMDb score, Rotten Tomatoes critic and user ratings, and Metacritic critic and user scores\n:::\n\n::: {.column width=\"30%\"}\n![](images/02/fandango.png){fig-alt=\"Fandango logo\" width=\"200\"}\n\n![](images/02/imdb.png){fig-alt=\"IMDB logo\" width=\"200\"}\n\n![](images/02/rotten-tomatoes.png){fig-alt=\"Rotten Tomatoes logo\" width=\"200\"}\n\n![](images/02/metacritic.png){fig-alt=\"Metacritic logo\" width=\"200\"}\n:::\n:::\n\n## Data prep\n\n-   Rename Rotten Tomatoes columns as `critics` and `audience`\n-   Rename the dataset as `movie_scores`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovie_scores <- fandango |>\n  rename(critics = rottentomatoes, \n         audience = rottentomatoes_user)\n```\n:::\n\n\n\n## Movie scores data\n\nThe data set contains the \"Tomatometer\" score (**`critics`**) and audience score (**`audience`**) for 146 movies rated on rottentomatoes.com.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nmovie_scores |> \ngf_point(audience ~ critics, alpha = 0.5) + \n  labs(x = \"Critics Score\" , \n       y = \"Audience Score\")\n```\n\n::: {.cell-output-display}\n![](05-slr-prediction_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Movie ratings data\n\n**Goal**: Fit a line to describe the relationship between the critics score and audience score.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-slr-prediction_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n# Prediction\n\n## Recall: Our Model\n\n\n```{=tex}\n\\begin{aligned}\n\\widehat{Y} &= 32.3142 + 0.5187 \\times X\\\\\n\n\\widehat{\\text{audience}} &= 32.3142 + 0.5187 \\times \\text{critics}\n\\end{aligned}\n```\n\n\n## Making a prediction\n\nSuppose that a movie has a critics score of 70. According to this model, what is the movie's predicted audience score?\n\n\n```{=tex}\n\\begin{aligned}\n\\widehat{\\text{audience}} &= 32.3142 + 0.5187 \\times \\text{critics} \\\\\n&= 32.3142 + 0.5187 \\times 70 \\\\\n&= 68.6232\n\\end{aligned}\n```\n\n\n# Fitting the model\n\n## Fit model & estimate parameters\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1\"}\nmovie_fit <- lm(audience ~ critics, data = movie_scores)\nmovie_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = audience ~ critics, data = movie_scores)\n\nCoefficients:\n(Intercept)      critics  \n    32.3155       0.5187  \n```\n\n\n:::\n:::\n\n\n## Look at the regression output\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nmovie_fit <- lm(audience ~ critics, data = movie_scores)\nmovie_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = audience ~ critics, data = movie_scores)\n\nCoefficients:\n(Intercept)      critics  \n    32.3155       0.5187  \n```\n\n\n:::\n:::\n\n\n\n$$\\widehat{\\text{audience}} = 32.3155 + 0.5187 \\times \\text{critics}$$\n\n. . .\n\n::: smallest\n**Note:** The intercept is off by a tiny bit from the hand-calculated intercept, this is just due to rounding in the hand calculation.\n:::\n\n## The regression output\n\nWe'll focus on the first column for now...\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nmovie_fit |> \n  tidy() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)   32.3      2.34        13.8 4.03e-28\n2 critics        0.519    0.0345      15.0 2.70e-31\n```\n\n\n:::\n:::\n\n\n## Format output with `kable`\n\nUse the `kable` function from the [knitr](https://yihui.org/knitr/) package to produce a table and specify number of significant digits\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nmovie_fit |> \n  tidy() |>\n  kable(digits = 4)\n```\n\n::: {.cell-output-display}\n\n\n|term        | estimate| std.error| statistic| p.value|\n|:-----------|--------:|---------:|---------:|-------:|\n|(Intercept) |  32.3155|    2.3425|   13.7953|       0|\n|critics     |   0.5187|    0.0345|   15.0281|       0|\n\n\n:::\n:::\n\n\n## Visualize Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovie_scores |> \n  gf_point(audience ~ critics) |> \n  gf_lm()\n```\n\n::: {.cell-output-display}\n![](05-slr-prediction_files/figure-revealjs/unnamed-chunk-8-1.png){width=80%}\n:::\n:::\n\n\n## Prediction\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|5\"}\n# create a data frame for a new movie\nnew_movie <- tibble(critics = 70)\n\n# predict the outcome for a new movie\npredict(movie_fit, new_movie)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       1 \n68.62297 \n```\n\n\n:::\n:::\n\n\n# Wrap up\n\n## Recap\n\n::: {.incremental style=\"font-size: 0.85em\"}\n-   Predicted the response given a value of the predictor variable.\n\n-   Used `lm` and the `broom` package to fit and summarize regression models in R.\n:::",
    "supporting": [
      "05-slr-prediction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}