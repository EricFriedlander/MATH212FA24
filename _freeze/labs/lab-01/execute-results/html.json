{
  "hash": "b4a801e31c552d670ec6a24a9b5c08e0",
  "result": {
    "markdown": "---\ntitle: \"Lab 01: Access to public parks\"\nsubtitle: \"Exploratory Data Analysis + Simple Linear Regression\" \nexecute:\n  freeze: auto\n  echo: true\n  evaluate: false\n  warning: false\n  message: false\nbibliography: references.bib\n---\n\n\n::: callout-important\nDue:\n\n-   Friday, September 8, 11:59pm (Tuesday labs)\n-   Sunday, September 10, 11:59pm (Thursday labs)\n:::\n\n# Introduction\n\nThis lab will go through much of the same workflow we've demonstrated in class. The main goal is to reinforce our demo of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\nAn additional goal is to reinforce git and GitHub, the collaboration and version control system that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nTo make versioning simpler, this and the next lab are individual labs. In the future, you'll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\n\n## Learning goals\n\nBy the end of the lab, you will...\n\n-   Be familiar with the workflow using RStudio and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using GitHub\n-   Be able to create data visualizations using `ggplot2` and use those visualizations to describe distributions\n-   Be gain to fit, interpret, and evaluate simple linear regression models\n\n# Getting Started\n\n::: callout-important\nYour lab TA will lead you through the Getting Started section.\n:::\n\n### Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n\n-   Click `STA210` to log into the Docker container. You should now see the RStudio environment.\n\n::: callout-warning\nIf you haven't yet done so, you will need to reserve a container for `STA210` first.\n:::\n\n### Set up your SSH Key\n\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n::: callout-note\nYou only need to do this authentication process one time on a single system.\n:::\n\n-   **Step 1**: Type `credentials::ssh_setup_github()` into your console.\n-   **Step 2**: R will ask \"No SSH key found. Generate one now?\" You should click 1 for yes.\n-   **Step 3**: You will generate a key. It will begin with \"ssh-rsa....\" R will then ask \"Would you like to open a browser now?\" You should click 1 for yes.\n-   **Step 4**: You may be asked to provide your username and password to log into GitHub. This would be the ones associated with your account that you set up. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., `sta210`)\n\nYou can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.\n\n### Configure git\n\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\n\nTo do so, you will use the `use_git_config()` function from the `usethis` package.\n\nType the following lines of code in the **console** in RStudio filling in your name and the email address associated with your GitHub account.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\")\n```\n:::\n\n\nFor example, mine would be\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(\n  user.name = \"Maria Tackett\",\n  user.email = \"maria.tackett@duke.edu\")\n```\n:::\n\n\nYou are now ready interact between GitHub and RStudio!\n\n## Clone the repo & start new RStudio project\n\n-   Go to the course organization at [github.com/sta210-fa23](https://github.com/sta210-fa23) organization on GitHub. Click on the repo with the prefix **lab-01-**. It contains the starter documents you need to complete the lab.\n\n<!-- -->\n\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.\n\n<!-- -->\n\n-   In RStudio, go to *File* $\\rightarrow$ *New Project* $\\rightarrow$ *Version Control* $\\rightarrow$ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n<!-- -->\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-01.qmd* to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n\n## R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/01/rstudio-panes.png)\n\nBelow are the components of an Quarto (.Rmd) file.\n\n![](images/01/quarto.png){fig-align=\"center\"}\n\n### YAML\n\nThe top portion of your Quarto file (between the three dashed lines) is called **YAML**. It stands for \"YAML Ain't Markup Language\". It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n::: callout-important\nOpen the Quarto (.Rmd) file in your project, change the author name to your name, and render the document. Examine the rendered document.\n:::\n\n### Committing changes\n\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on **Diff**. This shows you the *diff*erence between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository. First, **stage** your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, \"updated author name\") in the **Commit message** box. Finally, click **Commit**. Note that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious. You should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\n\nNow let's make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you're good to go!\n\n### Push changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed. click on **Push**.\n\n# Packages\n\nWe will use the following packages in today's lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(skimr)\n```\n:::\n\n\n# Data\n\nToday's data is about access to parks and other public amenities in the 100 most populated cities in the United States. The data set was obtained from [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-06-22/readme.md) and was originally curated by the [Trust for Public Land](https://www.tpl.org/parks-and-an-equitable-recovery-parkscore-report). **\\[UPDATE\\] ADD MORE BACKGROUND AN EXPLANATION OF \"POINTS\"**\n\nUse the code below to load the data into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparks <- read_csv(\"data/parks.csv\")\n```\n:::\n\n\nThis analysis will focus on the following variables:\n\n-   `pct_near_park_points`: Percent of residents within a 10 minute walk to park points\n\n-   `spend_per_resident_data`: Spending per resident in USD\n\n[Click here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-06-22/readme.md) for the full data dictionary.\n\n# Exercises\n\n**\\[UPDATE\\] Goal**: You are furnishing a new apartment and would like to use statistical analysis to get idea of how much the furniture will cost and how the cost may change based on the type and width.\n\n------------------------------------------------------------------------\n\nWrite all code and narrative in your Quarto file. Write all narrative in complete sentences. Throughout the assignment, you should periodically **render** your Quarto document to produce the updated PDF, **commit** the changes in the Git pane, and **push** the updated files to GitHub.\n\n::: callout-tip\nMake sure we can read all of your code in your PDF document. This means you will need to break up long lines of code. One way to help avoid long lines of code is is start a new line after every pipe (`|>`) and plus sign (`+`).\n:::\n\n### Exercise 1\n\nViewing a summary of the data is a useful starting point for data analysis, especially if there are a large number of observations or variables . Run the code below to use the `glimpse` function to see a summary of the `parks` data frame.\n\nHow many observations (rows) are in `parks`? How many variables (columns)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(parks)\n```\n:::\n\n\n::: callout-note\nIn your \\``` lab-01.qmd` `` document you'll see that we already added the code required for the exercise as well as a sentence where you can fill in the blanks to report the answer. Use this format for the remaining exercises.\n\nAlso note that the code chunk as a label: `glimpse-data`. It's not required, but good practice and highly encouraged to label your code chunks using short meaningful names. (*Hint: Do not uses spaces in code chunk labels. Use `-` to separate multiple words.)*\n:::\n\n### Exercise 2\n\nThe predictor variable for this analysis `spend_per_resident_data` is quantitative; however, from the glimpse of the data in Exercise 1, we see its data type is `chr` (character) in R.\n\n-   What data type would we expect a column of quantitative data to be?\n-   Why did `spend_per_resident_data` load into R as a `chr` variable type instead of what we would expect?\n-   In the next exercise, we will transform `spend_per_resident_data` so it is the correct data type for our analysis. Why do we need to ensure this column is the correct data type before proceeding with the rest of the analysis? Why can't we leave it as a character?\n\n### Exercise 3\n\nBelow is code below to transform `spend_per_resident_data` so that it is treated as quantitative data in R. Each line of code is numbered. Write a brief explanation about what each line of code does.\n\n::: callout-tip\nSee [Simple Linear Regression in R](https://introregression.netlify.app/04-slr#simple-linear-regression-in-r) for an example of explaining code line by line.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparks <- parks |>  # <1>\n  mutate(spend_per_resident_data = str_replace(spend_per_resident_data,\"$\", \"\")) |> # <2>\n  mutate(spend_per_resident_data = as.numeric(spend_per_resident_data)) # <3>\n```\n:::\n\n\n1.  \\_\\_\\_\\_\\_\\_\n2.  \\_\\_\\_\\_\\_\\_\n3.  \\_\\_\\_\\_\\_\\_\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your lab-01 repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 1 - 3\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 4\n\nWe begin each regression analysis with exploratory data analysis (EDA) to help us \"get to know\" the data and examine the variable distributions and relationships between variables. We do this by visualizing the data and calculating summary statistics to describe the variables in our data set.\n\nWhen we make visualizations, we want them to be clear and suitable for a professional audience. This means that, at a minimum, each visualization should have **an informative title** and **informative axis labels**.\n\nFill in the code below to visualize the distribution of `spend_per_resident_data` using a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ____, aes(x = ____)) +\n  geom_histogram() +\n    labs(x = \"_____\",\n       y = \"_____\", \n       title = \"_____\")\n```\n:::\n\n\nNow fill in the code to calculate summary statistics for this variable using the `skim` function from the skimr R package [@skimr].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparks |>\n  skim(_____)\n```\n:::\n\n\n### Exercise 5\n\nUse the visualization and summary statistics to describe the distribution of `spend_per_resident_data`. In your narrative, include description of the shape, center, spread, and the presence of apparent outliers or other interesting features.\n\n### Exercise 6\n\nNow let's look at the distribution of the response variable `pct_near_park_points`.\n\n-   Make a visualization of its distribution and display a table of summary statistics. The visualization should have informative axis labels ans title.\n\n-   Use the visualization and summary statistics to describe the distribution of `pct_near_park_points` . Recall from the previous exercise the components to include the description.\n\n::: render-commit-push\nThis is another good place to render, commit, and push changes to your lab-01 repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 4 - 6\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 7\n\nIn the previous two exercises, we looked at the distribution of the raw data (the data in its original form). The raw data range from year 2012 to 2020, so each row contains information about funding and public aneminies for each city in a given year. Therefore, there are multiple rows of data for each city. We would like to summarize the data, so there is just one row of information for each city. Fill in the code below to create a new data set called `parks_summary` that contains the mean spending per resident and mean points for residents within a 10-minute walk to a park.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparks_summary <- ____ |>\n  group_by(____) |>\n  summarise(mean_spend = mean(____),\n            mean_pts_near = ____)\n```\n:::\n\n\nHow many rows are in `parks_summary`? How many columns?\n\n::: callout-important\nUse `parks_summary` for exercises 8 - 9.\n:::\n\n### Exercise 8\n\nCreate a visualization of the relationship between the mean spending and mean points for the percentage of residents within a 10-minute walk to a park. Include informative axis labels and an informative title. Then calculate the correlation. Use the visualization and correlation to describe the relationship between the two variables. The description should include the shape, direction, strength, presence of potential outliers, and other any other interesting features.\n\n::: callout-tip\nSee [Bivariate EDA](https://introregression.netlify.app/04-slr#bivariate-eda) for an example.\n:::\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your lab-01 repo on GitHub. Write an informative commit message (e.g. \"Completed exercises 7- 8\"), and push every file to GitHub by clicking the checkbox next to each file in the Git pane. After you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 9\n\n-   Fit and display a linear regression model of the relationship between spending and points for residents within a 10-minute walk from a park. Use the tidymodels [@tidymodels] syntax.\n\n\n```{=html}\n<!-- -->\n```\n\n-   Interpret the slope in the context of the data.\n\n-   Does the intercept have a meaningful interpretation? If so, interpret the intercept in the context of the data. Otherwise briefly explain why not.\n\n### Exercise 10\n\nIn the CityLab article [\"The Inequality of American Parks\"](https://www.bloomberg.com/news/articles/2021-05-27/the-cities-where-people-of-color-can-walk-to-a-park), the authors state the following:\n\n> [New data from the Trust for Public Land](https://www.tpl.org/parks-and-an-equitable-recovery-parkscore-report) shows that in the 100 most populated U.S. cities, neighborhoods that are majority nonwhite have, on average, access to 44% less park acreage than majority white neighborhoods. Low-income communities have access to 42% less than high-income neighborhoods.\n\nAre we able to assess this claim using the data available to us in `parks.csv`? If so, briefly describe how we might assess this claim using the data (e.g., what visualizations and/or summary statistics would you produce? What relationships between variables would you explore?) If not, briefly describe the additional data we would need in order to assess this claim.\n\n::: render-commit-push\nYou're done and ready to submit your work! render, commit, and push all remaining changes. You can use the commit message \"Done with Lab 1!\", and make sure you have pushed all the files to GitHub (your Git pane in RStudio should be empty) and that <u>all</u> documents are updated in your repo on GitHub. The PDF document you submit to Gradescope should be identical to the one in your GitHub repo.\n:::\n\nSee the instructions below to submit your work on Gradescope.\n\n# Submission\n\nIn this class, we'll be submitting PDF documents to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nRemember -- you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com>and click *Log in* in the top right corner.\n-   Click *School Credentials* ➡️ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 210* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n-   Select the first page of your .PDF submission to be associated with the *\"Workflow & formatting\"* section.\n\n# Grading (50 pts)\n\n<br>\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1 - 10             | 45     |\n| Workflow & formatting | 5[^1]  |\n\n[^1]: The \"Workflow & formatting\" grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}