---
title: "AE 10: Model workflow"
subtitle: "Peer-to-peer lender"
date: "Oct 11, 2023"
editor: visual
---

::: callout-important
Go to the [course GitHub organization](https://github.com/sta210-fa23) and locate your `ae-10` repo to get started.

Render, commit, and push your responses to GitHub by the end of class. The responses are due in your GitHub repo no later than Saturday, October 14 at 11:59pm.
:::

## Packages + data

```{r load-packages}
#| message: false
library(tidyverse)
library(tidymodels)
library(knitr)
library(openintro)
```

The data for this AE is from the `loan50` data set in the **openintro** R package. We will focus on the following variables:

**Predictors**

-   `annual_income`: Annual income (in US dollars)
-   `debt_to_income`: Debt-to-income ratio, i.e. the percentage of a borrower's total debt divided by their total income
-   `verified_income`: Whether borrower's income source and amount have been verified (`Not Verified`, `Source Verified`, `Verified`)

**Response**

-   `interest_rate`: Interest rate for the loan (0- 100)

## Analysis goal

The goals of this analysis are to build a recipe to fit a linear regression model on the training data that has the following features:

-   `annual_income` rescaled to thousands of dollars
    -   Remove the original `annual_income` from the model
-   Mean-centered quantitative variables
-   Indicator (dummy) variables for the categorical predictor
-   Interaction term between rescaled `annual_income` and `verified_income`

and (2) use `prep()` and `bake()` to check the recipe

## Relevel `verified_income`

Make `Verified` the baseline level for the model.

```{r}
loan50 <- loan50 |>
  mutate(verified_income = factor(verified_income, levels = c("Verified", "Not Verified", 
                                                              "Source Verified")))
```

## Test/train split

Split the data into 90% training, 10% testing.

```{r}
set.seed(123)

loan_split <- initial_split(loan50, prop = 0.9)
loan_train <- training(loan_split)
loan_test  <- testing(loan_split)
```

## Build (and troubleshoot) recipe

-   Use `step_mutate()` to create a new variable `annual_income_th` that is `annual_income` rescaled to thousands of dollars

-   Use `step_center()` to mean-center quantitative variables

-   Use `step_dummy()` to create indicator variables for the categorical predictor

-   Use `step_interact()` to create interaction between `annual_income_th` and `verified_income`

```{r}
loan_rec <-  recipe(interest_rate ~ annual_income + debt_to_income + verified_income, 
                    data = loan_train) |>
  step_mutate(annual_income_th = annual_income / 1000) |>
  step_rm(annual_income) |>
  step_center(all_numeric_predictors()) |>
  step_dummy(all_nominal_predictors()) |>
  step_interact(terms = ~ annual_income_th:verified_income) 
```

```{r}
loan_rec
```

### Check recipe using `prep()` and `bake()`

```{r}
#| eval: false

# determine required parameters to be estimated
loan_rec |>
  prep() |>
  bake(loan_train) |>
  glimpse()
```

-   In which step do we have an error?

-   [Click here](https://recipes.tidymodels.org/reference/index.html){target="”_blank”"} to access the recipes reference page. Find the reference page for the relevant `step_` function.

-   See the examples at the bottom of the reference page. Which model most closely aligns the interaction we're trying to create?

-   Use example to help you fix the code. Then, use `prep()` and `bake()` to see the updated results.

## Workflows and model fitting

### Specify model

```{r}

loan_spec <- linear_reg() |>
  set_engine("lm")

loan_spec
```

### Build workflow

```{r}
#| eval: false
loan_wflow <- workflow() |>
  add_model(loan_spec) |>
  add_recipe(loan_rec)

loan_wflow
```

### Fit model to training data

::: callout-note
Remove `#| eval: false` before rendering the document.
:::

```{r}
#| eval: false
loan_fit <- loan_wflow |>
  fit(data = loan_train)

tidy(loan_fit) |>
  kable(digits = 3)
```

## Evaluate model on training data

### Make predictions

::: callout-note
Fill in the code and remove `#| eval: false` before rendering the document.
:::

```{r}
#| eval: false

loan_train_pred <- predict(loan_fit, ______) |>
  bind_cols(_____)
```

### Calculate $R^2$

::: callout-note
Fill in the code and remove `#| eval: false` before rendering the document.
:::

```{r}
#| eval: false
rsq(loan_train_pred, truth = _____, estimate = _____)
```

### Calculate RMSE

::: callout-note
Fill in the code and remove `#| eval: false` before rendering the document.
:::

```{r}
#| eval: false
rmse(______, ________, ________)
```

-   Is this RMSE considered high or low? *Hint: Consider the range of the response variable to answer this question*.

    ```{r}
    loan_train |>
      summarise(min = min(interest_rate), max = max(interest_rate))
    ```

## Evaluate model on testing data

### Make predictions

```{r}
# fill in code to make predictions from testing data

```

### Calculate $R^2$

```{r}
# fill in code to calculate $R^2$ for testing data

```

### Calculate RMSE

```{r}
# fill in code to calculate RMSE for testing data

```

## Compare training and testing data results

-   Compare the $R^2$ for the training and testing data. Is this what you expected?

-   Compare the RMSE for the training and testing data. Is this what you expected?

## To submit the AE

::: callout-important
-   Render the document to produce the PDF with all of your work from today's class.
-   Push all your work to your `ae-10` repo on GitHub. (You do not submit AEs on Gradescope).
:::
